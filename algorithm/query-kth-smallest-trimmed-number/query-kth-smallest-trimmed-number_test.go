package query_kth_smallest_trimmed_number

import (
	"reflect"
	"testing"
)

func Test_smallestTrimmedNumbers(t *testing.T) {
	tests := []struct {
		name    string
		nums    []string
		queries [][]int
		want    []int
	}{
		// TODO: Add test cases.
		{
			nums: []string{"102", "473", "251", "814"},
			queries: [][]int{
				{1, 1},
				{2, 3},
				{4, 2},
				{1, 2},
			},
			want: []int{2, 2, 1, 0},
		},
		{
			nums: []string{"24", "37", "96", "04"},
			queries: [][]int{
				{2, 1},
				{2, 2},
			},
			want: []int{3, 0},
		},
		{
			nums: []string{
				"64333639502",
				"65953866768",
				"17845691654",
				"87148775908",
				"58954177897",
				"70439926174",
				"48059986638",
				"47548857440",
				"18418180516",
				"06364956881",
				"01866627626",
				"36824890579",
				"14672385151",
				"71207752868",
			},
			queries: [][]int{
				{9, 4},
				{6, 1},
				{3, 8},
				{12, 9},
				{11, 4},
				{4, 9},
				{2, 7},
				{10, 3},
				{13, 1},
				{13, 1},
				{6, 1},
				{5, 10},
			},
			want: []int{1, 5, 11, 10, 7, 0, 0, 1, 13, 13, 5, 12},
		},
		// ["8331019423839036903","2215783497319194533","3244863164120264914","2723857887888553250","1069645833408356268","3799170975306313470","3300849027471666477","8896469467436127218","9595084104356246555","4601424390471226348","2777623221871959897","2660664761264162910","4830224756337097853","2239177595019260973","5704104074606481922","5158962343348888307","4957489822885409209","5533958195540658313","6712811206814843536","9775503283462317096","1975389311819120035","1292135637676764140","9838972337538013522","7609294617007602893","0186572359592634437","9236053726818307461","7264888050655615544","4990296885039745852","1417868535147288083"]
		// [[22,19],[16,17],[10,7],[27,16],[9,9],[21,4],[24,2],[12,11],[2,5],[24,12],[25,7],[7,13],[14,9],[23,15],[18,17],[22,16],[4,14],[14,17],[25,11],[12,16],[29,3],[22,11],[29,2],[24,2],[24,15],[7,14],[7,3],[7,14],[1,3]]
		{
			nums: []string{
				"8331019423839036903", "2215783497319194533", "3244863164120264914", "2723857887888553250", "1069645833408356268",
				"3799170975306313470", "3300849027471666477", "8896469467436127218", "9595084104356246555", "4601424390471226348",
				"2777623221871959897", "2660664761264162910", "4830224756337097853", "2239177595019260973", "5704104074606481922",
				"5158962343348888307", "4957489822885409209", "5533958195540658313", "6712811206814843536", "9775503283462317096",
				"1975389311819120035", "1292135637676764140", "9838972337538013522", "7609294617007602893", "0186572359592634437",
				"9236053726818307461", "7264888050655615544", "4990296885039745852", "1417868535147288083",
			},
			queries: [][]int{
				{22, 19}, {16, 17}, {10, 7}, {27, 16}, {9, 9}, {21, 4}, {24, 2}, {12, 11}, {2, 5}, {24, 12}, {25, 7}, {7, 13}, {14, 9}, {23, 15}, {18, 17}, {22, 16}, {4, 14}, {14, 17}, {25, 11}, {12, 16}, {29, 3}, {22, 11}, {29, 2}, {24, 2}, {24, 15}, {7, 14}, {7, 3}, {7, 14}, {1, 3},
			},
			want: []int{26, 16, 16, 13, 12, 19, 13, 22, 25, 11, 0, 10, 19, 3, 11, 10, 0, 13, 3, 2, 13, 5, 10, 13, 2, 12, 3, 12, 20},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := smallestTrimmedNumbers(tt.nums, tt.queries); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("smallestTrimmedNumbers() = %v, want %v", got, tt.want)
			}
		})
	}
}
